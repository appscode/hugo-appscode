<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Kubernetes Company</title>
    <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/</link>
    <description>Recent content on The Kubernetes Company</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure Active Directory | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/ldap_azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/ldap_azure/</guid>
      <description>Authenticate using secure LDAP of Azure Active Directory Domain Services There is a nice documentation about how to enable secure LDAP for the managed domain using Azure portal here. If you configured DNS to access the managed domain, then use it as SERVER_ADDRESS. If not configured, then you can use EXTERNAL IP ADDRESS FOR LDAPS ACCESS as SERVER_ADDRESS. For LDAPS use 636 as server PORT. Procedure to find EXTERNAL IP ADDRESS FOR LDAPS ACCESS is given below:</description>
    </item>
    
    <item>
      <title>Azure Authenticator | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/azure/</guid>
      <description>Azure Authenticator Guard installation guide can be found here. To use Azure, create a client cert with Organization set to Azure.For Azure CommonName is optional. To ease this process, use the Guard cli to issue a client cert/key pair.
$ guard init client [CommonName] -o Azure  Deploy guard server To generate installer YAMLs for guard server you can use the following command.
# generate Kubernetes YAMLs for deploying guard server $ guard get installer \ --auth-providers = &amp;quot;azure&amp;quot; \ --azure.</description>
    </item>
    
    <item>
      <title>Github Authenticator | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/github/</guid>
      <description>Github Authenticator Guard installation guide can be found here. To use Github, you need a client cert with CommonName set to Github organization name and Organization set to Github. To ease this process, use the Guard cli to issue a client cert/key pair.
$ guard init client {common-name} -o Github  Deploy Guard Server To generate installer YAMLs for guard server you can use the following command.
$ guard get installer \ --auth-providers=&amp;quot;github&amp;quot; \ &amp;gt; installer.</description>
    </item>
    
    <item>
      <title>Gitlab Authenticator | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/gitlab/</guid>
      <description>Gitlab Authenticator Guard installation guide can be found here. To use Gitlab, you need a client cert with Organization set to Gitlab. To ease this process, use the Guard cli to issue a client cert/key pair.
$ guard init client {common-name} -o Gitlab  Deploy Guard Server To generate installer YAMLs for guard server you can use the following command.
$ guard get installer \ --auth-providers=&amp;quot;gitlab&amp;quot; \ &amp;gt; installer.yaml $ kubectl apply -f installer.</description>
    </item>
    
    <item>
      <title>Google Authenticator | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/google/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/google/</guid>
      <description>Google Authenticator To use Google, you need a client cert with CommonName set to Google Apps (now G Suite) domain and Organization set to Google. To ease this process, use the Guard cli to issue a client cert/key pair.
$ guard init client {domain-name} -o Google  G Suite Domain-Wide Delegation of Authority Guard server needs to determine the list of groups for any user in a G suite domain.</description>
    </item>
    
    <item>
      <title>LDAP Authenticator | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/ldap/</guid>
      <description>LDAP Authenticator Guard installation guide can be found here. To use LDAP, create a client cert with Organization set to Ldap. For LDAP CommonName is optional. To ease this process, use the Guard cli to issue a client cert/key pair.
# If CommonName is not provided, then default CommonName `ldap` is used $ guard init client [CommonName] -o Ldap  Deploy Guard Server To generate installer YAMLs for guard server you can use the following command.</description>
    </item>
    
    <item>
      <title>Static Token File Authentication | Guard</title>
      <link>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/static_token_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://appscode-v3-hugo.web.app/products/guard/0.1.2/guides/authenticator/static_token_file/</guid>
      <description>Static Token File Authentication TO use static token file authentication, you need to set --token-auth-file flag of your guard server to a token file.
You can use the following command with --token-auth-file to generate YAMLs for deploying guard server with static token file authentication.
$ guard get installer \ --auth-providers=&amp;quot;token-auth&amp;quot; \ --token-auth-file=&amp;lt;path_to_the_token_file&amp;gt; \ &amp;gt; installer.yaml $ kubectl apply -f installer.yaml  { &amp;quot;apiVersion&amp;quot;: &amp;quot;authentication.k8s.io/v1&amp;quot;, &amp;quot;kind&amp;quot;: &amp;quot;TokenReview&amp;quot;, &amp;quot;status&amp;quot;: { &amp;quot;authenticated&amp;quot;: true, &amp;quot;user&amp;quot;: { &amp;quot;username&amp;quot;: &amp;quot;&amp;lt;user-name&amp;gt;&amp;quot;, &amp;quot;uid&amp;quot;: &amp;quot;&amp;lt;user-id&amp;gt;&amp;quot;, &amp;quot;groups&amp;quot;: [ &amp;quot;&amp;lt;group-1&amp;gt;&amp;quot;, &amp;quot;&amp;lt;group-2&amp;gt;&amp;quot; ] } } }  Guard uses the token found in TokenReview request object to get user&amp;rsquo;s information and list of groups this user is member of.</description>
    </item>
    
  </channel>
</rss>